# Author: Mamun
# All rights reserved. Copyright (c)
# docker-compose exec -it app php artisan migrate:refresh --seed
# docker-compose exec app php artisan --env=testing migrate:fresh --seed
# docker-compose exec -it app php artisan optimize:clear
# docker-compose exec app ./vendor/bin/phpunit tests/Feature/Auth/AuthenticationTest.php --filter=test_users_can_authenticate_using_the_login_screen
# docker-compose exec app ./vendor/bin/phpunit
# docker-compose exec app php artisan migrate:fresh --seed --env=testing
# docker-compose exec python python my_basic_project/app.py
# docker-compose exec python python -m pytest --cov=my_basic_project --cov-report=term-missing my_basic_project/tests/


version: '3.8'

services:
  app:
    image: laravel/php
    container_name: laravel_app
    restart: unless-stopped
    tty: true
    labels:
      project: "laravel-app"
      environment: local
      company: " Inc"
    build:
      context: .
      dockerfile: Dockerfile
    working_dir: /var/www
    volumes:
      - .:/var/www
      - ./storage:/var/www/storage
      - ./bootstrap/cache:/var/www/bootstrap/cache
    # tty: true
    # command: sh -c "php artisan migrate && php-fpm"
    depends_on:
      - db
    # env_file:
    #   - .env
    expose:
      - "9000"
    networks:
      - practice

  node:
    image: node:20  # Use latest LTS version
    container_name: laravel_node
    working_dir: /var/www
    volumes:
      - .:/var/www
    command: tail -f /dev/null

  #MySQL Service
  db:
    image: mysql:5.7
    container_name: laravel_db
    restart: unless-stopped
    tty: true
    platform: linux/amd64
    labels:
      project: "laravel-practice"
      environment: local
      company: " Inc"
    environment:
      MYSQL_DATABASE: laravel_test
      MYSQL_ROOT_PASSWORD: secret
      MYSQL_PASSWORD: secret
      MYSQL_USER: user
    volumes:
      - dbdata:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d
    ports:
      - 33066:3306
    networks:
      - practice
    command: --character-set-server=utf8 --collation-server=utf8_unicode_ci
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  queue:
    build:
        context: .
        dockerfile: Dockerfile
    container_name: laravel_queue
    restart: always
    working_dir: /var/www
    command: sh -c "until php artisan migrate:status; do echo Waiting for database connection...; sleep 5; done && php artisan queue:work"
    volumes:
        - .:/var/www
    depends_on:
      db:
        condition: service_healthy
      app:
        condition: service_started
    networks:
        - practice

  nginx:
    image: nginx:latest
    container_name: laravel_nginx
    ports:
      - 5000:80
    volumes:
      - ./:/var/www
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    networks:
      - practice

  phpmyadmin:
    image: phpmyadmin:latest
    container_name: practice_phpmyadmin
    restart: always
    ports:
      - 5010:80
    labels:
      project: "laravel-practice"
      environment: local
      company: " Inc"
    environment:
      UPLOAD_LIMIT: 102400
      HIDE_PHP_VERSION: 1
      PMA_HOST: db
      PMA_ARBITRARY: 1
      PMA_USER: root
      PMA_PASSWORD: secret
      MYSQL_ROOT_PASSWORD: secret
    depends_on:
      - db
    links:
      - db
    networks:
      - practice

  python:
    build:
      context: ./python
      dockerfile: Dockerfile
    container_name: python_practice
    restart: unless-stopped
    working_dir: /usr/src/app
    volumes:
      - ./python:/usr/src/app
    command: sh -c "tail -f /dev/null && python my_basic_project/app.py && chmod -R 777 my_basic_project"
    networks:
      - practice

  #   #Redis Service
  #   redis:
  #     image: redis:alpine
  #     container_name: redis
  #     restart: unless-stopped
  #     tty: true
  #     labels:
  #       project: "laravel-practice"
  #       environment: local
  #       company: " Inc"
  #     ports:
  #       - 6379:6379
  #     networks:
  #       - practice

#Docker Networks
networks:
  practice:
    driver: bridge

volumes:
  dbdata:
    driver: local
